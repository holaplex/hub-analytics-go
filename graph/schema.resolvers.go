package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.27

import (
	"context"
	"encoding/json"
	"fmt"
	"time"

	"github.com/apache/arrow/go/v12/arrow"
	"github.com/apache/arrow/go/v12/arrow/array"
	"github.com/apache/arrow/go/v12/arrow/memory"
	"github.com/holaplex/hub-analytics/graph/model"
)

// Stats is the resolver for the stats field.
func (r *dropResolver) Stats(ctx context.Context, obj *model.Drop, startTime time.Time, endTime *time.Time) (*model.DropStats, error) {
	return &model.DropStats{Drop: obj, Start: startTime, End: endTime}, nil
}

// Mints is the resolver for the mints field.
func (r *dropStatsResolver) Mints(ctx context.Context, obj *model.DropStats) (stat *model.IntStatistic, err error) {
	query := r.Influx.Project(ctx, r.Org, obj.Drop.Project.Id)

	stmt, err := query.Prepare(`
	select *
	from mints
	where time >= (now() - $1)::timestamp
	`)
	if err != nil {
		err = fmt.Errorf("Error executing query: %w", err)
		return
	}
	defer stmt.Close()

	pool := memory.NewGoAllocator()

	schema := arrow.NewSchema(
		[]arrow.Field{
			{Name: "1", Type: arrow.PrimitiveTypes.Date64},
		},
		nil,
	)

	b := array.NewRecordBuilder(pool, schema)
	defer b.Release()

	b.Field(0).(*array.Date64Builder).AppendValues([]arrow.Date64{1}, []bool{})

	rec := b.NewRecord()
	defer rec.Release()

	stmt.SetParameters(rec)

	info, err := stmt.Execute()
	if err != nil {
		err = fmt.Errorf("Error executing query: %w", err)
		return
	}

	reader, err := query.DoGet(info.Endpoint[0].Ticket)
	if err != nil {
		err = fmt.Errorf("Error getting query results: %w", err)
		return
	}

	for reader.Next() {
		record := reader.Record()
		var b []byte
		b, err = json.MarshalIndent(record, "", "  ") // ??????
		if err != nil {
			err = fmt.Errorf("Error reading query results: %w", err)
			return
		}

		fmt.Printf("BATCH\n%s\n", b)

		err = reader.Err()
		if err != nil {
			err = fmt.Errorf("Error in query results: %w", err)
			return
		}
	}

	// params := struct {
	//   Start time.Time  `json:"start"`
	//   End   *time.Time `json:"end"`
	// }{Start: obj.Start, End: obj.End}
	// query := influx.GetOrgQuery(r.Influx, r.Org)
	// res, err := query.QueryWithParams(ctx, `
	//   from(bucket: "hub-mints")
	//     |> range(start: params.start, end: params.end)
	// `, params)
	// if err != nil {
	//   return
	// }

	// for res.Next() {
	//   err = res.Err()
	//   if err != nil {
	//     return
	//   }

	//   if res.TableChanged() {
	//     panic(fmt.Errorf("Table changed: %s", res.TableMetadata()))
	//   }

	//   val := res.Record().Value()
	//   panic(fmt.Errorf("i hate everything %s", val))
	// }

	return
}

// TimeSeries is the resolver for the timeSeries field.
func (r *dropStatsResolver) TimeSeries(ctx context.Context, obj *model.DropStats, window model.Window) (*model.DropTimeSeriesStats, error) {
	return &model.DropTimeSeriesStats{Stats: obj, Window: window}, nil
}

// Mints is the resolver for the mints field.
func (r *dropTimeSeriesStatsResolver) Mints(ctx context.Context, obj *model.DropTimeSeriesStats) (points []*model.IntDatapoint, err error) {
	// panic("HELP")
	// query := influx.GetOrgQuery(r.Influx, r.Org)
	// res, err := query.QueryWithParams(ctx, `
	// yield 0
	// `, struct {
	// }{})
	// if err != nil {
	//   return
	// }

	// for res.Next() {
	//   err = res.Err()
	//   if err != nil {
	//     return
	//   }

	//   if res.TableChanged() {
	//     panic(fmt.Errorf("Table changed: %s", res.TableMetadata()))
	//   }

	//   val := res.Record().Value()
	//   panic(fmt.Errorf("i hate everything %s", val))
	// }

	// TODO
	return []*model.IntDatapoint{}, nil
}

// Drop is the resolver for the drop field.
func (r *projectResolver) Drop(ctx context.Context, obj *model.Project, id string) (*model.Drop, error) {
	return &model.Drop{Project: obj, Id: id}, nil
}

// Project is the resolver for the project field.
func (r *queryResolver) Project(ctx context.Context, id string) (*model.Project, error) {
	return &model.Project{Id: id}, nil
}

// Drop returns DropResolver implementation.
func (r *Resolver) Drop() DropResolver { return &dropResolver{r} }

// DropStats returns DropStatsResolver implementation.
func (r *Resolver) DropStats() DropStatsResolver { return &dropStatsResolver{r} }

// DropTimeSeriesStats returns DropTimeSeriesStatsResolver implementation.
func (r *Resolver) DropTimeSeriesStats() DropTimeSeriesStatsResolver {
	return &dropTimeSeriesStatsResolver{r}
}

// Project returns ProjectResolver implementation.
func (r *Resolver) Project() ProjectResolver { return &projectResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type dropResolver struct{ *Resolver }
type dropStatsResolver struct{ *Resolver }
type dropTimeSeriesStatsResolver struct{ *Resolver }
type projectResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
